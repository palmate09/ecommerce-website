// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(uuid())
  googleId                String?               @unique
  name                    String?
  email                   String                @unique
  username                String                @unique
  password                String                
  mobileNo                String?               @unique
  address                 Address[]
  cart                    Cart?
  order                   Order[]
  passwordReset           PasswordResetToken[]
  payment                 payment[]
  review                  Review[]
  reply                   Reply[]
  ratings                 Ratings[]
  product                 Product[]
  LikeReview              likeReview[]
  LikeReply               likeReply[]
  admin                   Admin?                 @relation(fields: [adminId], references: [id])
  adminId                 String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt                                 
}

model PasswordResetToken {
  id                      String              @id @default(uuid())
  token                   String              @unique
  userId                  String
  user                    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  expireAt                DateTime            
  createAt                DateTime            @default(now())
} 


model Address {
  id                      String                @id @default(uuid())
  userId                  String               
  user                    User                  @relation(fields: [userId], references: [id])
  flat_no                 String
  Floor_no                String
  nearby_landmark         String
  description             String?
  pincode                 String
  addressType             AddressType           @unique
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}


enum AddressType {
  Home
  Work 
  Hotel 
  Other
}


model Product {
  id                    String              @id @default(uuid())
  name                  String              @unique
  description           String?
  category              Category            @relation(fields: [categoryName], references: [name])
  categoryName          String
  review                Review[]
  reviewCount           Int?     
  rating                Ratings[]
  price                 Float                 @unique
  OriginalPrice         Float                 @unique
  inStock               Boolean             @default(false)
  cartItems             cartItems[]  
  orderItems            OrderItems[]     

  admin                 Admin               @relation(fields: [adminId], references: [id])
  adminId               String
  user                  User?                @relation(fields: [userId], references: [id])
  userId                String?   
}

model  Category {
  id                  String                @id @default(uuid())
  name                String                @unique  //e.g., all, masala, chivda, chips 
  products            Product[]

  admin               Admin                 @relation(fields: [adminId], references: [id])
  adminId             String
}


model Ratings {
  id                  Int                   @id @default(autoincrement())
  rating              String?
  ProductId           String
  product             Product              @relation(fields: [ProductId], references: [id])                
  userId              String               @unique
  user                User                @relation(fields: [userId], references: [id])
}


model Review {
  id                    String              @id @default(uuid())
  userId                String?
  user                  User?                @relation(fields: [userId], references: [id])
  productId             String?
  product               Product?            @relation(fields: [productId], references: [id])
  description           String?
  reply                 Reply[] 
  LikeReview            likeReview[]        
  createdAt             DateTime            @default(now())
  updateAt              DateTime            @updatedAt
}



model Reply {
  id                   Int              @id @default(autoincrement())
  reviewId             String
  review               Review           @relation(fields: [reviewId], references: [id])
  description          String?
  user                 User             @relation(fields: [userId], references: [id])
  userId               String
  LikeReply            likeReply[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
}

model likeReview {
  user                  User               @relation(fields: [userId], references: [id])
  userId                String
  review                Review             @relation(fields: [reviewId], references: [id])
  reviewId              String
  vote                  Int 
  date                  DateTime           @default(now())
  @@id([userId, reviewId])
}

model likeReply {
  user                 User               @relation(fields: [userId], references: [id])
  userId               String
  reply                Reply             @relation(fields: [replyId], references: [id])
  replyId              Int
  vote                 Int
  date                 DateTime           @default(now())
  @@id([userId, replyId])
}


model Cart {
  id                    String              @id @default(uuid())
  user                  User                @relation(fields: [userId], references: [id])
  userId                String              @unique
  items                 cartItems[]
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
}


model cartItems {
  id                    String             @id @default(uuid())
  quantity              Int      
  price                 Float          
  product               Product            @relation(fields: [productId], references: [id])
  productId             String             
  cart                  Cart              @relation(fields: [cartId], references: [id])
  cartId                String
}

model payment {
  id                  String              @id @default(uuid())
  userId              String
  user                User                @relation(fields: [userId], references: [id])
  amount              Float
  status              paymentStatus
  createdAt           DateTime            @default(now())
  order               Order?              
}


enum paymentStatus {
  PENDING
  PAID 
  FAILED
}

model Order {
  id                    String              @id @default(uuid())
  user                  User                @relation(fields: [userId], references: [id])
  userId                String
  admin                 Admin?               @relation(fields: [adminId], references: [id])
  adminId               String?
  payment               payment?              @relation(fields: [paymentId], references: [id])
  paymentId             String?               @unique
  orderstatus           orderStatus
  items                 OrderItems[]
  total                 Float
  createdAt             DateTime              @default(now())
}


enum orderStatus {
  PLACED
  CANCELLED
}



model OrderItems {
  id                 String               @id @default(uuid())
  product            Product              @relation(fields: [productId], references: [id])
  productId          String
  order              Order                @relation(fields: [orderId], references: [id])
  orderId            String 
  quantity           Int
  price              Float
}


model Admin {
  id                String            @id @default(uuid())
  name              String?
  username          String            @unique
  email             String            @unique
  password          String
  product           Product[]
  category          Category[]
  user              User[]
  order             Order[]
  forgotpassToken   ForgotPasswordTokenAdmin[]
}

model ForgotPasswordTokenAdmin {
  id                String            @id @default(uuid())
  token             String            @unique
  admin             Admin             @relation(fields: [adminId], references: [id])
  adminId           String
  expiresAt         DateTime
  createdAt         DateTime          @default(now())
}